// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CarbonTrackerApi.BDDTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GerenciamentoDeEdificiosFeature : object, global::Xunit.IClassFixture<GerenciamentoDeEdificiosFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("pt"), "Features", "Gerenciamento de edifícios", "Como usuário autenticado da API\r\nQuero cadastrar, consultar e atualizar edifícios" +
                "\r\nPara que o sistema gerencie corretamente os registros de consumo de energia", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Edificio.feature"
#line hidden
        
        public GerenciamentoDeEdificiosFeature(GerenciamentoDeEdificiosFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Edificio.feature.ndjson", 6);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Cadastro bem-sucedido de edifício")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de edifícios")]
        [global::Xunit.TraitAttribute("Description", "Cadastro bem-sucedido de edifício")]
        public async global::System.Threading.Tasks.Task CadastroBem_SucedidoDeEdificio()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cadastro bem-sucedido de edifício", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 7
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "campo",
                            "valor"});
                table1.AddRow(new string[] {
                            "nome",
                            "Edifício Central"});
                table1.AddRow(new string[] {
                            "cidade",
                            "São Paulo"});
                table1.AddRow(new string[] {
                            "endereco",
                            "Rua tal"});
                table1.AddRow(new string[] {
                            "tipoEdificio",
                            "Prédio"});
#line 8
        await testRunner.GivenAsync("que eu possuo os seguintes dados do edifício:", ((string)(null)), table1, "Dado ");
#line hidden
#line 14
        await testRunner.WhenAsync("eu enviar uma requisição POST para \"edificio\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 15
        await testRunner.ThenAsync("o status code da resposta deve ser 201", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 16
        await testRunner.AndAsync("o corpo deve conter o campo \"nome\" com valor \"Edifício Central\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Consulta de edifício existente por ID")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de edifícios")]
        [global::Xunit.TraitAttribute("Description", "Consulta de edifício existente por ID")]
        public async global::System.Threading.Tasks.Task ConsultaDeEdificioExistentePorID()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Consulta de edifício existente por ID", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 18
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
        await testRunner.GivenAsync("que existe um edifício cadastrado com ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 20
        await testRunner.WhenAsync("eu enviar uma requisição GET para \"edificio/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 21
        await testRunner.ThenAsync("o status code da resposta deve ser 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 22
        await testRunner.AndAsync("o corpo deve conter o campo \"id\" com valor 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Tentativa de buscar edifício inexistente")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de edifícios")]
        [global::Xunit.TraitAttribute("Description", "Tentativa de buscar edifício inexistente")]
        public async global::System.Threading.Tasks.Task TentativaDeBuscarEdificioInexistente()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Tentativa de buscar edifício inexistente", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 24
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
        await testRunner.GivenAsync("que não existe um edifício com ID 999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 26
        await testRunner.WhenAsync("eu enviar uma requisição GET para \"edificio/999\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 27
        await testRunner.ThenAsync("o status code da resposta deve ser 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 28
        await testRunner.AndAsync("o corpo deve conter a mensagem \"não encontrado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Atualização bem-sucedida de edifício")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Gerenciamento de edifícios")]
        [global::Xunit.TraitAttribute("Description", "Atualização bem-sucedida de edifício")]
        public async global::System.Threading.Tasks.Task AtualizacaoBem_SucedidaDeEdificio()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Atualização bem-sucedida de edifício", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 30
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 31
        await testRunner.GivenAsync("que existe um edifício cadastrado com ID 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "campo",
                            "valor"});
                table2.AddRow(new string[] {
                            "nome",
                            "Edifício Atualizado"});
                table2.AddRow(new string[] {
                            "cidade",
                            "São Paulo"});
                table2.AddRow(new string[] {
                            "endereco",
                            "Rua tal"});
                table2.AddRow(new string[] {
                            "tipoEdificio",
                            "Prédio"});
#line 32
        await testRunner.AndAsync("que eu possuo os seguintes novos dados do edifício:", ((string)(null)), table2, "E ");
#line hidden
#line 38
        await testRunner.WhenAsync("eu enviar uma requisição PUT para \"edificio/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 39
        await testRunner.ThenAsync("o status code da resposta deve ser 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 40
        await testRunner.AndAsync("o corpo deve conter o campo \"nome\" com valor \"Edifício Atualizado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await GerenciamentoDeEdificiosFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await GerenciamentoDeEdificiosFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
